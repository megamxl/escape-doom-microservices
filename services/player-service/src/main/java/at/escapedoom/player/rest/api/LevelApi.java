/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.10.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package at.escapedoom.player.rest.api;

import at.escapedoom.player.rest.model.EscapeRoomLevel;
import at.escapedoom.player.rest.model.EscapeRoomResult;
import at.escapedoom.player.rest.model.EscapeRoomSolutionSubmition;
import java.util.UUID;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", comments = "Generator version: 7.10.0")
@Validated
@Tag(name = "level", description = "the level API")
public interface LevelApi {

    default LevelApiDelegate getDelegate() {
        return new LevelApiDelegate() {
        };
    }

    /**
     * GET /level/{player_session_id}/result : Get the result of the submitted solution for the current level of the
     * escape-room instance Get the result of the submitted solution for the current level of the escape-room instance
     *
     * @param playerSessionId
     *            The session-id of the player (required)
     *
     * @return OK (status code 200)
     */
    @Operation(operationId = "getLevelResult", summary = "Get the result of the submitted solution for the current level of the escape-room instance", description = "Get the result of the submitted solution for the current level of the escape-room instance", tags = {
            "level" }, responses = { @ApiResponse(responseCode = "200", description = "OK", content = {
                    @Content(mediaType = "application/json", schema = @Schema(implementation = EscapeRoomResult.class)) }) })
    @RequestMapping(method = RequestMethod.GET, value = "/level/{player_session_id}/result", produces = {
            "application/json" })

    default ResponseEntity<EscapeRoomResult> getLevelResult(
            @Parameter(name = "player_session_id", description = "The session-id of the player", required = true, in = ParameterIn.PATH) @PathVariable("player_session_id") UUID playerSessionId) {
        return getDelegate().getLevelResult(playerSessionId);
    }

    /**
     * GET /level/{player_session_id} : Get the current level of the escape-room instance Get the current level of the
     * escape-room instance
     *
     * @param playerSessionId
     *            The session-id of the player (required)
     *
     * @return OK (status code 200) or Internal Server Error (status code 500)
     */
    @Operation(operationId = "levelPlayerSessionIdGet", summary = "Get the current level of the escape-room instance", description = "Get the current level of the escape-room instance", tags = {
            "level" }, responses = { @ApiResponse(responseCode = "200", description = "OK", content = {
                    @Content(mediaType = "application/json", schema = @Schema(implementation = EscapeRoomLevel.class)) }),
                    @ApiResponse(responseCode = "500", description = "Internal Server Error") })
    @RequestMapping(method = RequestMethod.GET, value = "/level/{player_session_id}", produces = { "application/json" })

    default ResponseEntity<EscapeRoomLevel> levelPlayerSessionIdGet(
            @Parameter(name = "player_session_id", description = "The session-id of the player", required = true, in = ParameterIn.PATH) @PathVariable("player_session_id") UUID playerSessionId) {
        return getDelegate().levelPlayerSessionIdGet(playerSessionId);
    }

    /**
     * POST /level/{player_session_id}/submit : Submit a possible solution for the current level of the escape-room
     * instance Submit a possible solution for the current level of the escape-room instance
     *
     * @param playerSessionId
     *            The session-id of the player (required)
     * @param escapeRoomSolutionSubmition
     *            The solution to submit (required)
     *
     * @return OK (status code 200)
     */
    @Operation(operationId = "levelPlayerSessionIdSubmitPost", summary = "Submit a possible solution for the current level of the escape-room instance", description = "Submit a possible solution for the current level of the escape-room instance", tags = {
            "level" }, responses = { @ApiResponse(responseCode = "200", description = "OK") })
    @RequestMapping(method = RequestMethod.POST, value = "/level/{player_session_id}/submit", consumes = {
            "application/json" })

    default ResponseEntity<Void> levelPlayerSessionIdSubmitPost(
            @Parameter(name = "player_session_id", description = "The session-id of the player", required = true, in = ParameterIn.PATH) @PathVariable("player_session_id") UUID playerSessionId,
            @Parameter(name = "EscapeRoomSolutionSubmition", description = "The solution to submit", required = true) @Valid @RequestBody EscapeRoomSolutionSubmition escapeRoomSolutionSubmition) {
        return getDelegate().levelPlayerSessionIdSubmitPost(playerSessionId, escapeRoomSolutionSubmition);
    }

}
