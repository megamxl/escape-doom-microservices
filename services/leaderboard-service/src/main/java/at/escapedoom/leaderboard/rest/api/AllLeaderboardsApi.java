/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.10.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package at.escapedoom.leaderboard.rest.api;

import at.escapedoom.leaderboard.rest.model.FullExportRoomPinGet200ResponseInner;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", comments = "Generator version: 7.10.0")
@Validated
@Tag(name = "all-leaderboards", description = "the all-leaderboards API")
public interface AllLeaderboardsApi {

    default AllLeaderboardsApiDelegate getDelegate() {
        return new AllLeaderboardsApiDelegate() {
        };
    }

    /**
     * GET /escape-room-sessions : Get all session leaderboards Retrieve leaderboards for all sessions, optionally
     * filtered by session tags.
     *
     * @param tags
     *            A comma-separated list of tags to filter sessions. (optional)
     *
     * @return All session leaderboards (status code 200) or No sessions found (status code 404)
     */
    @Operation(operationId = "escapeRoomSessionsGet", summary = "Get all session leaderboards", description = "Retrieve leaderboards for all sessions, optionally filtered by session tags.", tags = {
            "all-leaderboards" }, responses = {
                    @ApiResponse(responseCode = "200", description = "All session leaderboards", content = {
                            @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = FullExportRoomPinGet200ResponseInner.class))) }),
                    @ApiResponse(responseCode = "404", description = "No sessions found") })
    @RequestMapping(method = RequestMethod.GET, value = "/escape-room-sessions", produces = { "application/json" })

    default ResponseEntity<List<FullExportRoomPinGet200ResponseInner>> escapeRoomSessionsGet(
            @Parameter(name = "tags", description = "A comma-separated list of tags to filter sessions.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "tags", required = false) List<String> tags) {
        return getDelegate().escapeRoomSessionsGet(tags);
    }

}
