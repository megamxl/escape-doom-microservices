/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.10.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package at.escapedoom.leaderboard.rest.api;

import at.escapedoom.leaderboard.rest.model.FullExportRoomPinGet200ResponseInner;
import at.escapedoom.leaderboard.rest.model.UserProgress;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", comments = "Generator version: 7.10.0")
@Validated
@Tag(name = "session-leaderboard", description = "the session-leaderboard API")
public interface SessionLeaderboardApi {

    default SessionLeaderboardApiDelegate getDelegate() {
        return new SessionLeaderboardApiDelegate() {
        };
    }

    /**
     * GET /full-export/{room_pin} : Retrieve full leaderboard Retrieve full leaderboard for a specific escape room
     * session, showing progress for all users.
     *
     * @param roomPin
     *            The unique ID of the escape room session. (required)
     *
     * @return Full leaderboard (status code 200)
     */
    @Operation(operationId = "fullExportRoomPinGet", summary = "Retrieve full leaderboard", description = "Retrieve full leaderboard for a specific escape room session, showing progress for all users.", tags = {
            "session-leaderboard" }, responses = {
                    @ApiResponse(responseCode = "200", description = "Full leaderboard", content = {
                            @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = FullExportRoomPinGet200ResponseInner.class))) }) })
    @RequestMapping(method = RequestMethod.GET, value = "/full-export/{room_pin}", produces = { "application/json" })

    default ResponseEntity<List<FullExportRoomPinGet200ResponseInner>> fullExportRoomPinGet(
            @Min(100000) @Max(999999) @Parameter(name = "room_pin", description = "The unique ID of the escape room session.", required = true, in = ParameterIn.PATH) @PathVariable("room_pin") Integer roomPin) {
        return getDelegate().fullExportRoomPinGet(roomPin);
    }

    /**
     * GET /{room_pin} : Get current session leaderboard Retrieve the leaderboard for a specific escape room session,
     * showing progress for all users.
     *
     * @param roomPin
     *            The unique ID of the escape room session. (required)
     *
     * @return Current session leaderboard (status code 200) or Session not found (status code 404)
     */
    @Operation(operationId = "roomPinGet", summary = "Get current session leaderboard", description = "Retrieve the leaderboard for a specific escape room session, showing progress for all users.", tags = {
            "session-leaderboard" }, responses = {
                    @ApiResponse(responseCode = "200", description = "Current session leaderboard", content = {
                            @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = UserProgress.class))) }),
                    @ApiResponse(responseCode = "404", description = "Session not found") })
    @RequestMapping(method = RequestMethod.GET, value = "/{room_pin}", produces = { "application/json" })

    default ResponseEntity<List<UserProgress>> roomPinGet(
            @Min(100000) @Max(999999) @Parameter(name = "room_pin", description = "The unique ID of the escape room session.", required = true, in = ParameterIn.PATH) @PathVariable("room_pin") Integer roomPin) {
        return getDelegate().roomPinGet(roomPin);
    }

}
