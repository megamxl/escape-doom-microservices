/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.11.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package at.escapedoom.data.rest.api;

import at.escapedoom.data.rest.model.CreateBadRequestDTO;
import at.escapedoom.data.rest.model.CreateInternalServerErrorDTO;
import at.escapedoom.data.rest.model.CreateNotFoundDTO;
import at.escapedoom.data.rest.model.RiddleCreationRequestDTO;
import at.escapedoom.data.rest.model.RiddleDTO;
import at.escapedoom.data.rest.model.RiddleDeletionResponseDTO;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", comments = "Generator version: 7.11.0")
@Validated
@Tag(name = "Riddle", description = "the Riddle API")
public interface RiddleApi {

    default RiddleApiDelegate getDelegate() {
        return new RiddleApiDelegate() {
        };
    }

    /**
     * POST /riddles : Create a new riddle Create a riddle without linking it to a specific level
     *
     * @param riddleCreationRequestDTO
     *            The details of the riddle to create (required)
     *
     * @return Riddle created successfully (status code 201) or Bad Request (status code 400) or Internal Server Error
     *         (status code 500)
     */
    @Operation(operationId = "createRiddle", summary = "Create a new riddle", description = "Create a riddle without linking it to a specific level", tags = {
            "Riddle" }, responses = {
                    @ApiResponse(responseCode = "201", description = "Riddle created successfully", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = RiddleDTO.class)) }),
                    @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = CreateBadRequestDTO.class)) }),
                    @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = CreateInternalServerErrorDTO.class)) }) })
    @RequestMapping(method = RequestMethod.POST, value = "/riddles", produces = { "application/json" }, consumes = {
            "application/json" })

    default ResponseEntity<RiddleDTO> createRiddle(
            @Parameter(name = "RiddleCreationRequestDTO", description = "The details of the riddle to create", required = true) @Valid @RequestBody RiddleCreationRequestDTO riddleCreationRequestDTO) {
        return getDelegate().createRiddle(riddleCreationRequestDTO);
    }

    /**
     * DELETE /riddles/{riddle-id} : Delete a riddle Delete a riddle that is not linked to any level
     *
     * @param riddleId
     *            The unique ID of the riddle (required)
     *
     * @return Riddle deleted successfully (status code 200) or Not Found (status code 404) or Internal Server Error
     *         (status code 500)
     */
    @Operation(operationId = "deleteRiddle", summary = "Delete a riddle", description = "Delete a riddle that is not linked to any level", tags = {
            "Riddle" }, responses = {
                    @ApiResponse(responseCode = "200", description = "Riddle deleted successfully", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = RiddleDeletionResponseDTO.class)) }),
                    @ApiResponse(responseCode = "404", description = "Not Found", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = CreateNotFoundDTO.class)) }),
                    @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = CreateInternalServerErrorDTO.class)) }) })
    @RequestMapping(method = RequestMethod.DELETE, value = "/riddles/{riddle-id}", produces = { "application/json" })

    default ResponseEntity<RiddleDeletionResponseDTO> deleteRiddle(
            @Parameter(name = "riddle-id", description = "The unique ID of the riddle", required = true, in = ParameterIn.PATH) @PathVariable("riddle-id") String riddleId) {
        return getDelegate().deleteRiddle(riddleId);
    }

    /**
     * GET /riddles : Get all riddles Retrieve all riddles that are not yet linked to any level
     *
     * @return A list of riddles (status code 200) or Internal Server Error (status code 500)
     */
    @Operation(operationId = "getAllRiddles", summary = "Get all  riddles", description = "Retrieve all riddles that are not yet linked to any level", tags = {
            "Riddle" }, responses = { @ApiResponse(responseCode = "200", description = "A list of riddles", content = {
                    @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = RiddleDTO.class))) }),
                    @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = CreateInternalServerErrorDTO.class)) }) })
    @RequestMapping(method = RequestMethod.GET, value = "/riddles", produces = { "application/json" })

    default ResponseEntity<List<RiddleDTO>> getAllRiddles(

    ) {
        return getDelegate().getAllRiddles();
    }

    /**
     * GET /riddles/{riddle-id} : Get one riddle by id Retrieve riddle that matches the UUID
     *
     * @param riddleId
     *            The unique ID of the riddle (required)
     *
     * @return The riddle (status code 200) or Internal Server Error (status code 500)
     */
    @Operation(operationId = "getRiddleById", summary = "Get one riddle by id", description = "Retrieve riddle that matches the UUID", tags = {
            "Riddle" }, responses = { @ApiResponse(responseCode = "200", description = "The riddle", content = {
                    @Content(mediaType = "application/json", schema = @Schema(implementation = RiddleDTO.class)) }),
                    @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = CreateInternalServerErrorDTO.class)) }) })
    @RequestMapping(method = RequestMethod.GET, value = "/riddles/{riddle-id}", produces = { "application/json" })

    default ResponseEntity<RiddleDTO> getRiddleById(
            @Parameter(name = "riddle-id", description = "The unique ID of the riddle", required = true, in = ParameterIn.PATH) @PathVariable("riddle-id") String riddleId) {
        return getDelegate().getRiddleById(riddleId);
    }

    /**
     * PUT /riddles/{riddle-id} : Override a riddle Override the details of a riddle
     *
     * @param riddleId
     *            The unique ID of the riddle (required)
     * @param riddleCreationRequestDTO
     *            The override details of the riddle (required)
     *
     * @return Riddle updated successfully (status code 200) or Bad Request (status code 400) or Not Found (status code
     *         404) or Internal Server Error (status code 500)
     */
    @Operation(operationId = "updateRiddle", summary = "Override a riddle", description = "Override the details of a riddle", tags = {
            "Riddle" }, responses = {
                    @ApiResponse(responseCode = "200", description = "Riddle updated successfully", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = RiddleDTO.class)) }),
                    @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = CreateBadRequestDTO.class)) }),
                    @ApiResponse(responseCode = "404", description = "Not Found", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = CreateNotFoundDTO.class)) }),
                    @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = CreateInternalServerErrorDTO.class)) }) })
    @RequestMapping(method = RequestMethod.PUT, value = "/riddles/{riddle-id}", produces = {
            "application/json" }, consumes = { "application/json" })

    default ResponseEntity<RiddleDTO> updateRiddle(
            @Parameter(name = "riddle-id", description = "The unique ID of the riddle", required = true, in = ParameterIn.PATH) @PathVariable("riddle-id") String riddleId,
            @Parameter(name = "RiddleCreationRequestDTO", description = "The override details of the riddle", required = true) @Valid @RequestBody RiddleCreationRequestDTO riddleCreationRequestDTO) {
        return getDelegate().updateRiddle(riddleId, riddleCreationRequestDTO);
    }

}
