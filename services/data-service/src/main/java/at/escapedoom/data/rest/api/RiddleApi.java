/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.10.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package at.escapedoom.data.rest.api;

import at.escapedoom.data.rest.model.CreateBadRequest;
import at.escapedoom.data.rest.model.CreateInternalServerError;
import at.escapedoom.data.rest.model.CreateNotFound;
import at.escapedoom.data.rest.model.CreateRiddleRequest;
import at.escapedoom.data.rest.model.DeleteRiddleRequest;
import at.escapedoom.data.rest.model.Riddle;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", comments = "Generator version: 7.10.0")
@Validated
@Tag(name = "Riddle", description = "the Riddle API")
public interface RiddleApi {

    default RiddleApiDelegate getDelegate() {
        return new RiddleApiDelegate() {
        };
    }

    /**
     * POST /riddle : Create a new riddle Create a riddle without linking it to a specific level
     *
     * @param createRiddleRequest
     *            The details of the riddle to create (required)
     *
     * @return Riddle created successfully (status code 201) or Bad Request (status code 400) or Internal Server Error
     *         (status code 500)
     */
    @Operation(operationId = "createRiddle", summary = "Create a new riddle", description = "Create a riddle without linking it to a specific level", tags = {
            "Riddle" }, responses = {
                    @ApiResponse(responseCode = "201", description = "Riddle created successfully", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Riddle.class)) }),
                    @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = CreateBadRequest.class)) }),
                    @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = CreateInternalServerError.class)) }) })
    @RequestMapping(method = RequestMethod.POST, value = "/riddle", produces = { "application/json" }, consumes = {
            "application/json" })

    default ResponseEntity<Riddle> createRiddle(
            @Parameter(name = "CreateRiddleRequest", description = "The details of the riddle to create", required = true) @Valid @RequestBody CreateRiddleRequest createRiddleRequest) {
        return getDelegate().createRiddle(createRiddleRequest);
    }

    /**
     * DELETE /riddles/{escape-room-riddle-id} : Delete a riddle Delete a riddle that is not linked to any level
     *
     * @param escapeRoomRiddleId
     *            The unique ID of the riddle (required)
     *
     * @return Riddle deleted successfully (status code 200) or Not Found (status code 404) or Internal Server Error
     *         (status code 500)
     */
    @Operation(operationId = "deleteRiddle", summary = "Delete a riddle", description = "Delete a riddle that is not linked to any level", tags = {
            "Riddle" }, responses = {
                    @ApiResponse(responseCode = "200", description = "Riddle deleted successfully", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = DeleteRiddleRequest.class)) }),
                    @ApiResponse(responseCode = "404", description = "Not Found", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = CreateNotFound.class)) }),
                    @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = CreateInternalServerError.class)) }) })
    @RequestMapping(method = RequestMethod.DELETE, value = "/riddles/{escape-room-riddle-id}", produces = {
            "application/json" })

    default ResponseEntity<DeleteRiddleRequest> deleteRiddle(
            @Parameter(name = "escape-room-riddle-id", description = "The unique ID of the riddle", required = true, in = ParameterIn.PATH) @PathVariable("escape-room-riddle-id") String escapeRoomRiddleId) {
        return getDelegate().deleteRiddle(escapeRoomRiddleId);
    }

    /**
     * GET /all-riddles : Get all riddles Retrieve all riddles that are not yet linked to any level
     *
     * @return A list of riddles (status code 200) or Internal Server Error (status code 500)
     */
    @Operation(operationId = "getAllRiddles", summary = "Get all  riddles", description = "Retrieve all riddles that are not yet linked to any level", tags = {
            "Riddle" }, responses = { @ApiResponse(responseCode = "200", description = "A list of riddles", content = {
                    @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Riddle.class))) }),
                    @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = CreateInternalServerError.class)) }) })
    @RequestMapping(method = RequestMethod.GET, value = "/all-riddles", produces = { "application/json" })

    default ResponseEntity<List<Riddle>> getAllRiddles(

    ) {
        return getDelegate().getAllRiddles();
    }

    /**
     * PUT /riddles/{escape-room-riddle-id} : Override a riddle Override the details of a riddle
     *
     * @param escapeRoomRiddleId
     *            The unique ID of the riddle (required)
     * @param createRiddleRequest
     *            The override details of the riddle (required)
     *
     * @return Riddle updated successfully (status code 200) or Bad Request (status code 400) or Not Found (status code
     *         404) or Internal Server Error (status code 500)
     */
    @Operation(operationId = "putRiddle", summary = "Override a riddle", description = "Override the details of a riddle", tags = {
            "Riddle" }, responses = {
                    @ApiResponse(responseCode = "200", description = "Riddle updated successfully", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Riddle.class)) }),
                    @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = CreateBadRequest.class)) }),
                    @ApiResponse(responseCode = "404", description = "Not Found", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = CreateNotFound.class)) }),
                    @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = CreateInternalServerError.class)) }) })
    @RequestMapping(method = RequestMethod.PUT, value = "/riddles/{escape-room-riddle-id}", produces = {
            "application/json" }, consumes = { "application/json" })

    default ResponseEntity<Riddle> putRiddle(
            @Parameter(name = "escape-room-riddle-id", description = "The unique ID of the riddle", required = true, in = ParameterIn.PATH) @PathVariable("escape-room-riddle-id") String escapeRoomRiddleId,
            @Parameter(name = "CreateRiddleRequest", description = "The override details of the riddle", required = true) @Valid @RequestBody CreateRiddleRequest createRiddleRequest) {
        return getDelegate().putRiddle(escapeRoomRiddleId, createRiddleRequest);
    }

}
