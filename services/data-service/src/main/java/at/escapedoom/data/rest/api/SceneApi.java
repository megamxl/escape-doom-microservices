/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.10.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package at.escapedoom.data.rest.api;

import at.escapedoom.data.rest.model.CreateBadRequest;
import at.escapedoom.data.rest.model.CreateInternalServerError;
import at.escapedoom.data.rest.model.CreateNotFound;
import at.escapedoom.data.rest.model.DeleteLevelResponse;
import at.escapedoom.data.rest.model.Scene;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", comments = "Generator version: 7.10.0")
@Validated
@Tag(name = "Scene", description = "the Scene API")
public interface SceneApi {

    default SceneApiDelegate getDelegate() {
        return new SceneApiDelegate() {
        };
    }

    /**
     * POST /scene : Create a new scene Create a Scene independently of any level
     *
     * @param scene
     *            The details of the new Scene (required)
     *
     * @return Scene created successfully (status code 201) or Bad Request (status code 400) or Internal Server Error
     *         (status code 500)
     */
    @Operation(operationId = "createScene", summary = "Create a new scene", description = "Create a Scene independently of any level", tags = {
            "Scene" }, responses = {
                    @ApiResponse(responseCode = "201", description = "Scene created successfully", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Scene.class)) }),
                    @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = CreateBadRequest.class)) }),
                    @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = CreateInternalServerError.class)) }) })
    @RequestMapping(method = RequestMethod.POST, value = "/scene", produces = { "application/json" }, consumes = {
            "application/json" })

    default ResponseEntity<Scene> createScene(
            @Parameter(name = "Scene", description = "The details of the new Scene", required = true) @Valid @RequestBody Scene scene) {
        return getDelegate().createScene(scene);
    }

    /**
     * DELETE /scenes/{escape-room-scene-id} : Delete a scene Delete a specific Scene by its ID
     *
     * @param escapeRoomSceneId
     *            The unique ID of the Scene (required)
     *
     * @return Scene deleted successfully (status code 200) or Not Found (status code 404) or Internal Server Error
     *         (status code 500)
     */
    @Operation(operationId = "deleteScene", summary = "Delete a scene", description = "Delete a specific Scene by its ID", tags = {
            "Scene" }, responses = {
                    @ApiResponse(responseCode = "200", description = "Scene deleted successfully", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = DeleteLevelResponse.class)) }),
                    @ApiResponse(responseCode = "404", description = "Not Found", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = CreateNotFound.class)) }),
                    @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = CreateInternalServerError.class)) }) })
    @RequestMapping(method = RequestMethod.DELETE, value = "/scenes/{escape-room-scene-id}", produces = {
            "application/json" })

    default ResponseEntity<DeleteLevelResponse> deleteScene(
            @Parameter(name = "escape-room-scene-id", description = "The unique ID of the Scene", required = true, in = ParameterIn.PATH) @PathVariable("escape-room-scene-id") String escapeRoomSceneId) {
        return getDelegate().deleteScene(escapeRoomSceneId);
    }

    /**
     * GET /scene : Get all scenes Retrieve all scenes that are not linked to any specific level
     *
     * @return A list of scenes (status code 200) or Internal Server Error (status code 500)
     */
    @Operation(operationId = "getAllScenes", summary = "Get all scenes", description = "Retrieve all scenes that are not linked to any specific level", tags = {
            "Scene" }, responses = { @ApiResponse(responseCode = "200", description = "A list of scenes", content = {
                    @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Scene.class))) }),
                    @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = CreateInternalServerError.class)) }) })
    @RequestMapping(method = RequestMethod.GET, value = "/scene", produces = { "application/json" })

    default ResponseEntity<List<Scene>> getAllScenes(

    ) {
        return getDelegate().getAllScenes();
    }

    /**
     * GET /scenes/{escape-room-scene-id} : Get details of a scene Retrieve details of a specific scene by its ID
     *
     * @param escapeRoomSceneId
     *            The unique ID of the Scene (required)
     *
     * @return Scene details (status code 200) or Not Found (status code 404) or Internal Server Error (status code 500)
     */
    @Operation(operationId = "getScene", summary = "Get details of a scene", description = "Retrieve details of a specific scene by its ID", tags = {
            "Scene" }, responses = {
                    @ApiResponse(responseCode = "200", description = "Scene details", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Scene.class)) }),
                    @ApiResponse(responseCode = "404", description = "Not Found", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = CreateNotFound.class)) }),
                    @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = CreateInternalServerError.class)) }) })
    @RequestMapping(method = RequestMethod.GET, value = "/scenes/{escape-room-scene-id}", produces = {
            "application/json" })

    default ResponseEntity<Scene> getScene(
            @Parameter(name = "escape-room-scene-id", description = "The unique ID of the Scene", required = true, in = ParameterIn.PATH) @PathVariable("escape-room-scene-id") String escapeRoomSceneId) {
        return getDelegate().getScene(escapeRoomSceneId);
    }

    /**
     * PUT /scenes/{escape-room-scene-id} : Update a scene Update the details of a specific Scene
     *
     * @param escapeRoomSceneId
     *            The unique ID of the Scene (required)
     * @param scene
     *            The updated details of the Scene (required)
     *
     * @return Scene updated successfully (status code 200) or Bad Request (status code 400) or Not Found (status code
     *         404) or Internal Server Error (status code 500)
     */
    @Operation(operationId = "putScene", summary = "Update a scene", description = "Update the details of a specific Scene", tags = {
            "Scene" }, responses = {
                    @ApiResponse(responseCode = "200", description = "Scene updated successfully", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Scene.class)) }),
                    @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = CreateBadRequest.class)) }),
                    @ApiResponse(responseCode = "404", description = "Not Found", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = CreateNotFound.class)) }),
                    @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = CreateInternalServerError.class)) }) })
    @RequestMapping(method = RequestMethod.PUT, value = "/scenes/{escape-room-scene-id}", produces = {
            "application/json" }, consumes = { "application/json" })

    default ResponseEntity<Scene> putScene(
            @Parameter(name = "escape-room-scene-id", description = "The unique ID of the Scene", required = true, in = ParameterIn.PATH) @PathVariable("escape-room-scene-id") String escapeRoomSceneId,
            @Parameter(name = "Scene", description = "The updated details of the Scene", required = true) @Valid @RequestBody Scene scene) {
        return getDelegate().putScene(escapeRoomSceneId, scene);
    }

}
