/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.11.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package at.escapedoom.data.rest.api;

import at.escapedoom.data.rest.model.*;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.annotation.Generated;
import jakarta.validation.Valid;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import java.util.List;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", comments = "Generator version: 7.11.0")
@Validated
@Tag(name = "Node", description = "the Node API")
public interface NodeApi {

    default NodeApiDelegate getDelegate() {
        return new NodeApiDelegate() {
        };
    }

    /**
     * POST /nodes : Creates node for level Creates a new node for a specific level
     *
     * @param nodeCreationRequest
     *            Lectors ID + Name and Description for a Node (required)
     *
     * @return Node created successfully (status code 201)
     */
    @Operation(operationId = "createNode", summary = "Creates node for level", description = "Creates a new node for a specific level", tags = {
            "Node" }, responses = {
                    @ApiResponse(responseCode = "201", description = "Node created successfully", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = NodeDTO.class)) }) })
    @RequestMapping(method = RequestMethod.POST, value = "/nodes", produces = { "application/json" }, consumes = {
            "application/json" })

    default ResponseEntity<NodeDTO> createNode(
            @Parameter(name = "NodeCreationRequest", description = "Lectors ID + Name and Description for a Node", required = true) @Valid @RequestBody NodeCreationRequest nodeCreationRequest) {
        return getDelegate().createNode(nodeCreationRequest);
    }

    /**
     * DELETE /nodes/{node-id} : Delete a node Delete a node by its ID
     *
     * @param nodeId
     *            The unique ID of the node (required)
     *
     * @return Node deleted successfully (status code 200) or Not Found (status code 404) or Internal Server Error
     *         (status code 500)
     */
    @Operation(operationId = "deleteNode", summary = "Delete a node", description = "Delete a node by its ID", tags = {
            "Node" }, responses = {
                    @ApiResponse(responseCode = "200", description = "Node deleted successfully", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = NodeDeletionResponseDTO.class)) }),
                    @ApiResponse(responseCode = "404", description = "Not Found", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = CreateNotFoundDTO.class)) }),
                    @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = CreateInternalServerErrorDTO.class)) }) })
    @RequestMapping(method = RequestMethod.DELETE, value = "/nodes/{node-id}", produces = { "application/json" })

    default ResponseEntity<NodeDeletionResponseDTO> deleteNode(
            @Parameter(name = "node-id", description = "The unique ID of the node", required = true, in = ParameterIn.PATH) @PathVariable("node-id") String nodeId) {
        return getDelegate().deleteNode(nodeId);
    }

    /**
     * GET /nodes : Get all nodes Retrieve all nodes from a Lector
     *
     * @return A list of nodes (status code 200) or Internal Server Error (status code 500)
     */
    @Operation(operationId = "getAllNodes", summary = "Get all nodes", description = "Retrieve all nodes from a Lector", tags = {
            "Node" }, responses = { @ApiResponse(responseCode = "200", description = "A list of nodes", content = {
                    @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = NodeDTO.class))) }),
                    @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = CreateInternalServerErrorDTO.class)) }) })
    @RequestMapping(method = RequestMethod.GET, value = "/nodes", produces = { "application/json" })

    default ResponseEntity<List<NodeDTO>> getAllNodes(

    ) {
        return getDelegate().getAllNodes();
    }

    /**
     * GET /nodes/{node-id} : Get details of a node Retrieve details of a specific node by its ID
     *
     * @param nodeId
     *            The unique ID of the node (required)
     *
     * @return Node details (status code 200) or Not Found (status code 404) or Internal Server Error (status code 500)
     */
    @Operation(operationId = "getNode", summary = "Get details of a node", description = "Retrieve details of a specific node by its ID", tags = {
            "Node" }, responses = { @ApiResponse(responseCode = "200", description = "Node details", content = {
                    @Content(mediaType = "application/json", schema = @Schema(implementation = NodeDTO.class)) }),
                    @ApiResponse(responseCode = "404", description = "Not Found", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = CreateNotFoundDTO.class)) }),
                    @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = CreateInternalServerErrorDTO.class)) }) })
    @RequestMapping(method = RequestMethod.GET, value = "/nodes/{node-id}", produces = { "application/json" })

    default ResponseEntity<NodeDTO> getNode(
            @Parameter(name = "node-id", description = "The unique ID of the node", required = true, in = ParameterIn.PATH) @PathVariable("node-id") String nodeId) {
        return getDelegate().getNode(nodeId);
    }

    /**
     * PUT /nodes/{node-id} : Override a node Override the details of a node
     *
     * @param nodeId
     *            The unique ID of the node (required)
     * @param nodeDTO
     *            The overridden details of the node (required)
     *
     * @return Node updated successfully (status code 200) or Bad Request (status code 400) or Not Found (status code
     *         404) or Internal Server Error (status code 500)
     */
    @Operation(operationId = "updateNode", summary = "Override a node", description = "Override the details of a node", tags = {
            "Node" }, responses = {
                    @ApiResponse(responseCode = "200", description = "Node updated successfully", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = NodeDTO.class)) }),
                    @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = CreateBadRequestDTO.class)) }),
                    @ApiResponse(responseCode = "404", description = "Not Found", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = CreateNotFoundDTO.class)) }),
                    @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = CreateInternalServerErrorDTO.class)) }) })
    @RequestMapping(method = RequestMethod.PUT, value = "/nodes/{node-id}", produces = {
            "application/json" }, consumes = { "application/json" })

    default ResponseEntity<NodeDTO> updateNode(
            @Parameter(name = "node-id", description = "The unique ID of the node", required = true, in = ParameterIn.PATH) @PathVariable("node-id") String nodeId,
            @Parameter(name = "NodeDTO", description = "The overridden details of the node", required = true) @Valid @RequestBody NodeDTO nodeDTO) {
        return getDelegate().updateNode(nodeId, nodeDTO);
    }

}
