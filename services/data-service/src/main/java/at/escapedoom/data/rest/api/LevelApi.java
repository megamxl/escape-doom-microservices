/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.11.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package at.escapedoom.data.rest.api;

import at.escapedoom.data.rest.model.CreateBadRequestDTO;
import at.escapedoom.data.rest.model.CreateInternalServerErrorDTO;
import at.escapedoom.data.rest.model.CreateNotFoundDTO;
import at.escapedoom.data.rest.model.DeleteLevelSuccessDTO;
import at.escapedoom.data.rest.model.LevelCreationRequest;
import at.escapedoom.data.rest.model.LevelDTO;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", comments = "Generator version: 7.11.0")
@Validated
@Tag(name = "Level", description = "the Level API")
public interface LevelApi {

    default LevelApiDelegate getDelegate() {
        return new LevelApiDelegate() {
        };
    }

    /**
     * POST /levels : Create a new level Create an Level independently of any template
     *
     * @param levelCreationRequest
     *            The details of the new Level (required)
     *
     * @return Level created successfully (status code 201) or Bad Request (status code 400) or Internal Server Error
     *         (status code 500)
     */
    @Operation(operationId = "createLevel", summary = "Create a new level", description = "Create an Level independently of any template", tags = {
            "Level" }, responses = {
                    @ApiResponse(responseCode = "201", description = "Level created successfully", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = LevelDTO.class)) }),
                    @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = CreateBadRequestDTO.class)) }),
                    @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = CreateInternalServerErrorDTO.class)) }) })
    @RequestMapping(method = RequestMethod.POST, value = "/levels", produces = { "application/json" }, consumes = {
            "application/json" })

    default ResponseEntity<LevelDTO> createLevel(
            @Parameter(name = "LevelCreationRequest", description = "The details of the new Level", required = true) @Valid @RequestBody LevelCreationRequest levelCreationRequest) {
        return getDelegate().createLevel(levelCreationRequest);
    }

    /**
     * DELETE /levels/{level-id} : Delete a level Delete a Level by its ID
     *
     * @param levelId
     *            The unique ID of the Level to delete (required)
     *
     * @return Level deleted successfully (status code 200) or Not Found (status code 404) or Internal Server Error
     *         (status code 500)
     */
    @Operation(operationId = "deleteLevel", summary = "Delete a level", description = "Delete a Level by its ID", tags = {
            "Level" }, responses = {
                    @ApiResponse(responseCode = "200", description = "Level deleted successfully", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = DeleteLevelSuccessDTO.class)) }),
                    @ApiResponse(responseCode = "404", description = "Not Found", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = CreateNotFoundDTO.class)) }),
                    @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = CreateInternalServerErrorDTO.class)) }) })
    @RequestMapping(method = RequestMethod.DELETE, value = "/levels/{level-id}", produces = { "application/json" })

    default ResponseEntity<DeleteLevelSuccessDTO> deleteLevel(
            @Parameter(name = "level-id", description = "The unique ID of the Level to delete", required = true, in = ParameterIn.PATH) @PathVariable("level-id") String levelId) {
        return getDelegate().deleteLevel(levelId);
    }

    /**
     * GET /levels : Retrieve all levels by a specific user Retrieve all levels by a specific user
     *
     * @return A list of levels (status code 200) or Internal Server Error (status code 500)
     */
    @Operation(operationId = "getAllLevels", summary = "Retrieve all levels by a specific user", description = "Retrieve all levels by a specific user", tags = {
            "Level" }, responses = { @ApiResponse(responseCode = "200", description = "A list of levels", content = {
                    @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = LevelDTO.class))) }),
                    @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = CreateInternalServerErrorDTO.class)) }) })
    @RequestMapping(method = RequestMethod.GET, value = "/levels", produces = { "application/json" })

    default ResponseEntity<List<LevelDTO>> getAllLevels(

    ) {
        return getDelegate().getAllLevels();
    }

    /**
     * GET /levels/{level-id} : Get details of a level Retrieve details of a specific Level by its ID
     *
     * @param levelId
     *            The unique ID of the Level (required)
     *
     * @return Level details (status code 200) or Not Found (status code 404) or Internal Server Error (status code 500)
     */
    @Operation(operationId = "getLevel", summary = "Get details of a level", description = "Retrieve details of a specific Level by its ID", tags = {
            "Level" }, responses = { @ApiResponse(responseCode = "200", description = "Level details", content = {
                    @Content(mediaType = "application/json", schema = @Schema(implementation = LevelDTO.class)) }),
                    @ApiResponse(responseCode = "404", description = "Not Found", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = CreateNotFoundDTO.class)) }),
                    @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = CreateInternalServerErrorDTO.class)) }) })
    @RequestMapping(method = RequestMethod.GET, value = "/levels/{level-id}", produces = { "application/json" })

    default ResponseEntity<LevelDTO> getLevel(
            @Parameter(name = "level-id", description = "The unique ID of the Level", required = true, in = ParameterIn.PATH) @PathVariable("level-id") String levelId) {
        return getDelegate().getLevel(levelId);
    }

    /**
     * GET /levels/{template-id} : Retrieve levels Retrieve all levels associated with a specific template
     *
     * @param templateId
     *            (required)
     *
     * @return A list of levels (status code 200)
     */
    @Operation(operationId = "getLevelByTemplate", summary = "Retrieve levels", description = "Retrieve all levels associated with a specific template", tags = {
            "Level" }, responses = { @ApiResponse(responseCode = "200", description = "A list of levels", content = {
                    @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = LevelDTO.class))) }) })
    @RequestMapping(method = RequestMethod.GET, value = "/levels/{template-id}", produces = { "application/json" })

    default ResponseEntity<List<LevelDTO>> getLevelByTemplate(
            @Parameter(name = "template-id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("template-id") String templateId) {
        return getDelegate().getLevelByTemplate(templateId);
    }

    /**
     * PUT /levels/{level-id} : Override a level Override the details of a Level
     *
     * @param levelId
     *            The unique ID of the Level (required)
     * @param levelDTO
     *            The overridden details of the Level (required)
     *
     * @return Level updated successfully (status code 200) or Bad Request (status code 400) or Not Found (status code
     *         404) or Internal Server Error (status code 500)
     */
    @Operation(operationId = "updateLevel", summary = "Override a level", description = "Override the details of a Level", tags = {
            "Level" }, responses = {
                    @ApiResponse(responseCode = "200", description = "Level updated successfully", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = LevelDTO.class)) }),
                    @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = CreateBadRequestDTO.class)) }),
                    @ApiResponse(responseCode = "404", description = "Not Found", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = CreateNotFoundDTO.class)) }),
                    @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = CreateInternalServerErrorDTO.class)) }) })
    @RequestMapping(method = RequestMethod.PUT, value = "/levels/{level-id}", produces = {
            "application/json" }, consumes = { "application/json" })

    default ResponseEntity<LevelDTO> updateLevel(
            @Parameter(name = "level-id", description = "The unique ID of the Level", required = true, in = ParameterIn.PATH) @PathVariable("level-id") String levelId,
            @Parameter(name = "LevelDTO", description = "The overridden details of the Level", required = true) @Valid @RequestBody LevelDTO levelDTO) {
        return getDelegate().updateLevel(levelId, levelDTO);
    }

}
