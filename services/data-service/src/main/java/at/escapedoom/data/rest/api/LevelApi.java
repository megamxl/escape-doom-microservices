/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.11.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package at.escapedoom.data.rest.api;

import at.escapedoom.data.rest.model.CreateBadRequest;
import at.escapedoom.data.rest.model.CreateInternalServerError;
import at.escapedoom.data.rest.model.CreateNotFound;
import at.escapedoom.data.rest.model.DeleteLevelSuccess;
import at.escapedoom.data.rest.model.EscapeRoomLevel;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", comments = "Generator version: 7.11.0")
@Validated
@Tag(name = "Level", description = "the Level API")
public interface LevelApi {

    default LevelApiDelegate getDelegate() {
        return new LevelApiDelegate() {
        };
    }

    /**
     * POST /level : Create a new level Create an EscapeRoomLevel independently of any template
     *
     * @param escapeRoomLevel
     *            The details of the new EscapeRoomLevel (required)
     *
     * @return Level created successfully (status code 201) or Bad Request (status code 400) or Internal Server Error
     *         (status code 500)
     */
    @Operation(operationId = "createLevel", summary = "Create a new level", description = "Create an EscapeRoomLevel independently of any template", tags = {
            "Level" }, responses = {
                    @ApiResponse(responseCode = "201", description = "Level created successfully", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = EscapeRoomLevel.class)) }),
                    @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = CreateBadRequest.class)) }),
                    @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = CreateInternalServerError.class)) }) })
    @RequestMapping(method = RequestMethod.POST, value = "/level", produces = { "application/json" }, consumes = {
            "application/json" })

    default ResponseEntity<EscapeRoomLevel> createLevel(
            @Parameter(name = "EscapeRoomLevel", description = "The details of the new EscapeRoomLevel", required = true) @Valid @RequestBody EscapeRoomLevel escapeRoomLevel) {
        return getDelegate().createLevel(escapeRoomLevel);
    }

    /**
     * DELETE /level/{escape-room-level-id} : Delete a level Delete a EscapeRoomLevel by its ID
     *
     * @param escapeRoomLevelId
     *            The unique ID of the EscapeRoomLevel to delete (required)
     *
     * @return Level deleted successfully (status code 200) or Not Found (status code 404) or Internal Server Error
     *         (status code 500)
     */
    @Operation(operationId = "deleteLevel", summary = "Delete a level", description = "Delete a EscapeRoomLevel by its ID", tags = {
            "Level" }, responses = {
                    @ApiResponse(responseCode = "200", description = "Level deleted successfully", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = DeleteLevelSuccess.class)) }),
                    @ApiResponse(responseCode = "404", description = "Not Found", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = CreateNotFound.class)) }),
                    @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = CreateInternalServerError.class)) }) })
    @RequestMapping(method = RequestMethod.DELETE, value = "/level/{escape-room-level-id}", produces = {
            "application/json" })

    default ResponseEntity<DeleteLevelSuccess> deleteLevel(
            @Parameter(name = "escape-room-level-id", description = "The unique ID of the EscapeRoomLevel to delete", required = true, in = ParameterIn.PATH) @PathVariable("escape-room-level-id") String escapeRoomLevelId) {
        return getDelegate().deleteLevel(escapeRoomLevelId);
    }

    /**
     * GET /all-levels : Retrieve all levels by a specific user Retrieve all levels by a specific user
     *
     * @return A list of levels (status code 200) or Internal Server Error (status code 500)
     */
    @Operation(operationId = "getAllLevels", summary = "Retrieve all levels by a specific user", description = "Retrieve all levels by a specific user", tags = {
            "Level" }, responses = { @ApiResponse(responseCode = "200", description = "A list of levels", content = {
                    @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = EscapeRoomLevel.class))) }),
                    @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = CreateInternalServerError.class)) }) })
    @RequestMapping(method = RequestMethod.GET, value = "/all-levels", produces = { "application/json" })

    default ResponseEntity<List<EscapeRoomLevel>> getAllLevels(

    ) {
        return getDelegate().getAllLevels();
    }

    /**
     * GET /levels/{escape-room-level-id} : Get details of a level Retrieve details of a specific EscapeRoomLevel by its
     * ID
     *
     * @param escapeRoomLevelId
     *            The unique ID of the EscapeRoomLevel (required)
     *
     * @return Level details (status code 200) or Not Found (status code 404) or Internal Server Error (status code 500)
     */
    @Operation(operationId = "getLevel", summary = "Get details of a level", description = "Retrieve details of a specific EscapeRoomLevel by its ID", tags = {
            "Level" }, responses = { @ApiResponse(responseCode = "200", description = "Level details", content = {
                    @Content(mediaType = "application/json", schema = @Schema(implementation = EscapeRoomLevel.class)) }),
                    @ApiResponse(responseCode = "404", description = "Not Found", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = CreateNotFound.class)) }),
                    @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = CreateInternalServerError.class)) }) })
    @RequestMapping(method = RequestMethod.GET, value = "/levels/{escape-room-level-id}", produces = {
            "application/json" })

    default ResponseEntity<EscapeRoomLevel> getLevel(
            @Parameter(name = "escape-room-level-id", description = "The unique ID of the EscapeRoomLevel", required = true, in = ParameterIn.PATH) @PathVariable("escape-room-level-id") String escapeRoomLevelId) {
        return getDelegate().getLevel(escapeRoomLevelId);
    }

    /**
     * GET /levels/{escape-room-template-id} : Retrieve levels Retrieve all levels associated with a specific template
     *
     * @param escapeRoomTemplateId
     *            (required)
     *
     * @return Success (status code 200)
     */
    @Operation(operationId = "getLevelByTemplate", summary = "Retrieve levels", description = "Retrieve all levels associated with a specific template", tags = {
            "Level" }, responses = { @ApiResponse(responseCode = "200", description = "Success") })
    @RequestMapping(method = RequestMethod.GET, value = "/levels/{escape-room-template-id}")

    default ResponseEntity<Void> getLevelByTemplate(
            @Parameter(name = "escape-room-template-id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("escape-room-template-id") String escapeRoomTemplateId) {
        return getDelegate().getLevelByTemplate(escapeRoomTemplateId);
    }

    /**
     * PUT /level/overide/{escape-room-level-id} : Override a level Override the details of a EscapeRoomLevel
     *
     * @param escapeRoomLevelId
     *            The unique ID of the EscapeRoomLevel (required)
     * @param escapeRoomLevel
     *            The overriden details of the EscapeRoomLevel (required)
     *
     * @return Level updated successfully (status code 200) or Bad Request (status code 400) or Not Found (status code
     *         404) or Internal Server Error (status code 500)
     */
    @Operation(operationId = "putLevelOfTemplate", summary = "Override a level", description = "Override the details of a EscapeRoomLevel", tags = {
            "Level" }, responses = {
                    @ApiResponse(responseCode = "200", description = "Level updated successfully", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = EscapeRoomLevel.class)) }),
                    @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = CreateBadRequest.class)) }),
                    @ApiResponse(responseCode = "404", description = "Not Found", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = CreateNotFound.class)) }),
                    @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = CreateInternalServerError.class)) }) })
    @RequestMapping(method = RequestMethod.PUT, value = "/level/overide/{escape-room-level-id}", produces = {
            "application/json" }, consumes = { "application/json" })

    default ResponseEntity<EscapeRoomLevel> putLevelOfTemplate(
            @Parameter(name = "escape-room-level-id", description = "The unique ID of the EscapeRoomLevel", required = true, in = ParameterIn.PATH) @PathVariable("escape-room-level-id") String escapeRoomLevelId,
            @Parameter(name = "EscapeRoomLevel", description = "The overriden details of the EscapeRoomLevel", required = true) @Valid @RequestBody EscapeRoomLevel escapeRoomLevel) {
        return getDelegate().putLevelOfTemplate(escapeRoomLevelId, escapeRoomLevel);
    }

}
