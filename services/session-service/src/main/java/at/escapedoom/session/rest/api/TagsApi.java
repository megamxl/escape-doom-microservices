/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.11.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package at.escapedoom.session.rest.api;

import at.escapedoom.session.rest.model.SessionResponse;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", comments = "Generator version: 7.11.0")
@Validated
@Tag(name = "tags", description = "the tags API")
public interface TagsApi {

    default TagsApiDelegate getDelegate() {
        return new TagsApiDelegate() {
        };
    }

    /**
     * PUT /tag/{escape_room_session_id}/{tag_name} : Add a tag to an escape-room instance Add a tag to an escape-room
     * instance
     *
     * @param escapeRoomSessionId
     *            The ID of the escape room session (required)
     * @param tagName
     *            The name of the tag to remove (required)
     *
     * @return The tag was added to the escape room (status code 200)
     */
    @Operation(operationId = "addERTag", summary = "Add a tag to an escape-room instance", description = "Add a tag to an escape-room instance", tags = {
            "tags" }, responses = {
                    @ApiResponse(responseCode = "200", description = "The tag was added to the escape room", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = SessionResponse.class)) }) })
    @RequestMapping(method = RequestMethod.PUT, value = "/tag/{escape_room_session_id}/{tag_name}", produces = {
            "application/json" })

    default ResponseEntity<SessionResponse> addERTag(
            @Parameter(name = "escape_room_session_id", description = "The ID of the escape room session", required = true, in = ParameterIn.PATH) @PathVariable("escape_room_session_id") String escapeRoomSessionId,
            @Parameter(name = "tag_name", description = "The name of the tag to remove", required = true, in = ParameterIn.PATH) @PathVariable("tag_name") String tagName) {
        return getDelegate().addERTag(escapeRoomSessionId, tagName);
    }

    /**
     * DELETE /tag/{escape_room_session_id}/{tag_name} : Remove a tag from an escape-room instance Remove a tag from an
     * escape-room instance
     *
     * @param escapeRoomSessionId
     *            The ID of the escape room session (required)
     * @param tagName
     *            The name of the tag to remove (required)
     *
     * @return The tag was added to the escape room (status code 200)
     */
    @Operation(operationId = "deleteERTag", summary = "Remove a tag from an escape-room instance", description = "Remove a tag from an escape-room instance", tags = {
            "tags" }, responses = {
                    @ApiResponse(responseCode = "200", description = "The tag was added to the escape room", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = SessionResponse.class)) }) })
    @RequestMapping(method = RequestMethod.DELETE, value = "/tag/{escape_room_session_id}/{tag_name}", produces = {
            "application/json" })

    default ResponseEntity<SessionResponse> deleteERTag(
            @Parameter(name = "escape_room_session_id", description = "The ID of the escape room session", required = true, in = ParameterIn.PATH) @PathVariable("escape_room_session_id") String escapeRoomSessionId,
            @Parameter(name = "tag_name", description = "The name of the tag to remove", required = true, in = ParameterIn.PATH) @PathVariable("tag_name") String tagName) {
        return getDelegate().deleteERTag(escapeRoomSessionId, tagName);
    }

}
