/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.11.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package at.escapedoom.session.rest.api;

import at.escapedoom.session.rest.model.EscapeRoomCreation;
import at.escapedoom.session.rest.model.EscapeRoomState;
import at.escapedoom.session.rest.model.SessionResponse;
import java.util.UUID;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import jakarta.validation.Valid;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", comments = "Generator version: 7.11.0")
@Validated
@Tag(name = "management", description = "the management API")
public interface ManagementApi {

    default ManagementApiDelegate getDelegate() {
        return new ManagementApiDelegate() {
        };
    }

    /**
     * POST /create : Create a new escape-room instance Creates a new escape-room instance
     *
     * @param escapeRoomCreation
     *            The escape-room template to use (required)
     *
     * @return OK (status code 200)
     */
    @Operation(operationId = "createERInstance", summary = "Create a new escape-room instance", description = "Creates a new escape-room instance", tags = {
            "management" }, responses = { @ApiResponse(responseCode = "200", description = "OK", content = {
                    @Content(mediaType = "application/json", schema = @Schema(implementation = SessionResponse.class)) }) })
    @RequestMapping(method = RequestMethod.POST, value = "/create", produces = { "application/json" }, consumes = {
            "application/json" })

    default ResponseEntity<SessionResponse> createERInstance(
            @Parameter(name = "EscapeRoomCreation", description = "The escape-room template to use", required = true) @Valid @RequestBody EscapeRoomCreation escapeRoomCreation) {
        return getDelegate().createERInstance(escapeRoomCreation);
    }

    /**
     * PUT /state/{escape_room_session_id}/{state} : Start or stop an escape-room instance Starts or stops an
     * escape-room instance
     *
     * @param escapeRoomSessionId
     *            The id of the escape-room instance (required)
     * @param state
     *            The state to set (required)
     *
     * @return OK (status code 200)
     */
    @Operation(operationId = "toggleERInstanceState", summary = "Start or stop an escape-room instance", description = "Starts or stops an escape-room instance", tags = {
            "management" }, responses = { @ApiResponse(responseCode = "200", description = "OK", content = {
                    @Content(mediaType = "application/json", schema = @Schema(implementation = SessionResponse.class)) }) })
    @RequestMapping(method = RequestMethod.PUT, value = "/state/{escape_room_session_id}/{state}", produces = {
            "application/json" })

    default ResponseEntity<SessionResponse> toggleERInstanceState(
            @Parameter(name = "escape_room_session_id", description = "The id of the escape-room instance", required = true, in = ParameterIn.PATH) @PathVariable("escape_room_session_id") UUID escapeRoomSessionId,
            @Parameter(name = "state", description = "The state to set", required = true, in = ParameterIn.PATH) @PathVariable("state") EscapeRoomState state) {
        return getDelegate().toggleERInstanceState(escapeRoomSessionId, state);
    }

}
