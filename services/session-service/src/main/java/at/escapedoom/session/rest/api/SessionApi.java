/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.11.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package at.escapedoom.session.rest.api;

import at.escapedoom.session.rest.model.EscapeRoomSessionResponse;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", comments = "Generator version: 7.11.0")
@Validated
@Tag(name = "session", description = "the session API")
public interface SessionApi {

    default SessionApiDelegate getDelegate() {
        return new SessionApiDelegate() {
        };
    }

    /**
     * GET /session/tags : Get all escape-room instances having specific tags Retrieves a list of escape-room instances
     * filtered by tags
     *
     * @param tags
     *            List of tags to filter by (required)
     *
     * @return OK (status code 200)
     */
    @Operation(operationId = "getERByTags", summary = "Get all escape-room instances having specific tags", description = "Retrieves a list of escape-room instances filtered by tags", tags = {
            "session" }, responses = { @ApiResponse(responseCode = "200", description = "OK", content = {
                    @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = EscapeRoomSessionResponse.class))) }) })
    @RequestMapping(method = RequestMethod.GET, value = "/session/tags", produces = { "application/json" })

    default ResponseEntity<List<EscapeRoomSessionResponse>> getERByTags(
            @NotNull @Parameter(name = "tags", description = "List of tags to filter by", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "tags", required = true) List<String> tags) {
        return getDelegate().getERByTags(tags);
    }

    /**
     * GET /session/{room_pin} : Retrieve an escape-room session by room pin Fetches an escape-room session using its
     * room pin
     *
     * @param roomPin
     *            The pin to join the escape-room (required)
     *
     * @return OK (status code 200)
     */
    @Operation(operationId = "getERSessionByPin", summary = "Retrieve an escape-room session by room pin", description = "Fetches an escape-room session using its room pin", tags = {
            "session" }, responses = { @ApiResponse(responseCode = "200", description = "OK", content = {
                    @Content(mediaType = "application/json", schema = @Schema(implementation = EscapeRoomSessionResponse.class)) }) })
    @RequestMapping(method = RequestMethod.GET, value = "/session/{room_pin}", produces = { "application/json" })

    default ResponseEntity<EscapeRoomSessionResponse> getERSessionByPin(
            @Min(100000) @Max(999999) @Parameter(name = "room_pin", description = "The pin to join the escape-room", required = true, in = ParameterIn.PATH) @PathVariable("room_pin") Integer roomPin) {
        return getDelegate().getERSessionByPin(roomPin);
    }

}
